services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: saanjhiuser
      POSTGRES_PASSWORD: saanjhiuser
      POSTGRES_DB: saanjhicreation
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  user-service:
    build:
      context: .
      dockerfile: Services/UserService/UserService.API/Dockerfile
    image: sanjhi.user.api
    container_name: sanjhi.user.api
    ports:
      - "8002:80"
#      - "8003:443"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
#      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_URLS: http://*:80
      ASPNETCORE_Kestrel__Certificates__Default__Password: reallyStrongPassword123
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
      FirebaseSecretPath: /secrets/firebase.json
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=saanjhicreation;Username=saanjhiuser;Password=saanjhiuser
    depends_on:
      - postgres
    volumes:
      - ${HOME}/.aspnet/dev-certs/https:/https/
      - secrets:/secrets:ro
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "https://localhost:443/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
  media-service:
    build:
      context: .
      dockerfile: Services/MediaService/MediaService.API/Dockerfile
    image: sanjhi.media.api
    container_name: sanjhi.media.api
    ports:
      - "8004:80"
#      - "8005:443"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
#      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_URLS: http://*:80
      ASPNETCORE_Kestrel__Certificates__Default__Password: reallyStrongPassword123
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
      FirebaseSecretPath: /secrets/firebase.json
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=saanjhicreation;Username=saanjhiuser;Password=saanjhiuser
    depends_on:
      - postgres
    volumes:
      - ${HOME}/.aspnet/dev-certs/https:/https/
      - secrets:/secrets:ro
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "https://localhost:443/health" ]
      interval: 10s
      timeout: 5s
      retries: 5  

  product-service:
    build:
      context: .
      dockerfile: Services/ProductService/ProductService.API/Dockerfile
    image: sanjhi.product.api
    container_name: sanjhi.product.api
    ports:
      - "8009:80"
#      - "8010:443"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
#      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_URLS: http://*:80
      ASPNETCORE_Kestrel__Certificates__Default__Password: reallyStrongPassword123
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
      FirebaseSecretPath: /secrets/firebase.json
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=saanjhicreation;Username=saanjhiuser;Password=saanjhiuser
    depends_on:
      - postgres
    volumes:
      - ${HOME}/.aspnet/dev-certs/https:/https/
      - secrets:/secrets:ro
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "https://localhost:443/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
  customer-service:
    build:
      context: .
      dockerfile: Services/CustomerService/CustomerService.API/Dockerfile
    image: sanjhi.customer.api
    container_name: sanjhi.customer.api
    ports:
      - "8011:80"
#      - "8012:443"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
#      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_URLS: http://*:80
      ASPNETCORE_Kestrel__Certificates__Default__Password: reallyStrongPassword123
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
      FirebaseSecretPath: /secrets/firebase.json
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=saanjhicreation;Username=saanjhiuser;Password=saanjhiuser
    depends_on:
      - postgres
    volumes:
      - ${HOME}/.aspnet/dev-certs/https:/https/
      - secrets:/secrets:ro
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "https://localhost:443/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      
  rental-service:
    build:
      context: .
      dockerfile: Services/RentalService/RentalService.API/Dockerfile
    image: sanjhi.rental.api
    container_name: sanjhi.rental.api
    ports:
      - "8013:80"
    #      - "8014:443"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      #      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_URLS: http://*:80
      ASPNETCORE_Kestrel__Certificates__Default__Password: reallyStrongPassword123
      ASPNETCORE_Kestrel__Certificates__Default__Path: /https/aspnetapp.pfx
      FirebaseSecretPath: /secrets/firebase.json
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=saanjhicreation;Username=saanjhiuser;Password=saanjhiuser
    depends_on:
      - postgres
      - product-service
      - customer-service
    volumes:
      - ${HOME}/.aspnet/dev-certs/https:/https/
      - secrets:/secrets:ro
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "https://localhost:443/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  secret-init:
    image: busybox
    volumes:
      - secrets:/secrets
      - ${HOME}/Secrets:/init-secrets:ro
    command: [ "/bin/sh", "-c", "cp /init-secrets/saanjhicreation-firebase-adminsdk.json /secrets/firebase.json" ]

networks:
  default:
    name: saanjhi-network
volumes:
  pgdata:
  secrets:
